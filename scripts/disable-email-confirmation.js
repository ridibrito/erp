const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas!');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// Fun√ß√£o para confirmar usu√°rio manualmente
async function confirmUser(email) {
  try {
    console.log(`üîç Confirmando usu√°rio: ${email}...`);
    
    // Buscar usu√°rio pelo email
    const { data: users, error: searchError } = await supabase.auth.admin.listUsers();
    
    if (searchError) {
      console.error('‚ùå Erro ao buscar usu√°rios:', searchError.message);
      return false;
    }

    const user = users.users.find(u => u.email === email);
    if (!user) {
      console.error('‚ùå Usu√°rio n√£o encontrado');
      return false;
    }

    // Confirmar usu√°rio
    const { data, error } = await supabase.auth.admin.updateUserById(user.id, {
      email_confirm: true
    });

    if (error) {
      console.error('‚ùå Erro ao confirmar usu√°rio:', error.message);
      return false;
    }

    console.log('‚úÖ Usu√°rio confirmado com sucesso!');
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao confirmar usu√°rio:', error.message);
    return false;
  }
}

// Fun√ß√£o para testar login ap√≥s confirma√ß√£o
async function testLoginAfterConfirmation(email, password) {
  try {
    console.log('üîç Testando login ap√≥s confirma√ß√£o...');
    
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password
    });

    if (error) {
      console.log('‚ùå Erro no login:', error.message);
      return false;
    }

    if (data.session && data.user) {
      console.log('‚úÖ Login realizado com sucesso!');
      console.log(`  Token: ${data.session.access_token.substring(0, 20)}...`);
      return data.session;
    }

    return false;
  } catch (error) {
    console.error('‚ùå Erro no teste de login:', error.message);
    return false;
  }
}

// Fun√ß√£o principal
async function main() {
  console.log('üöÄ Confirmando usu√°rio para teste...');
  
  const testEmail = 'test-1758968787531@gmail.com';
  const testPassword = 'test123456';

  try {
    // 1. Confirmar usu√°rio
    const confirmed = await confirmUser(testEmail);
    if (!confirmed) {
      console.log('‚ùå Falha ao confirmar usu√°rio');
      process.exit(1);
    }

    console.log('');

    // 2. Testar login
    const session = await testLoginAfterConfirmation(testEmail, testPassword);
    if (!session) {
      console.log('‚ùå Falha no login ap√≥s confirma√ß√£o');
      process.exit(1);
    }

    console.log('');
    console.log('üéâ Usu√°rio confirmado e login funcionando!');
    console.log('‚úÖ Autentica√ß√£o pronta para desenvolvimento');

  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
    process.exit(1);
  }
}

// Executar
main().catch(console.error);
