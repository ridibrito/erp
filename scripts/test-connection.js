const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

console.log('üîó Testando conex√£o com Supabase...');
console.log('URL:', supabaseUrl);
console.log('Key:', supabaseKey ? '‚úÖ Definida' : '‚ùå N√£o definida');

const supabase = createClient(supabaseUrl, supabaseKey);

async function testConnection() {
  try {
    // Testar conex√£o b√°sica
    const { data, error } = await supabase.from('_supabase_migrations').select('*').limit(1);
    
    if (error) {
      console.log('‚ÑπÔ∏è  Tabela de migra√ß√µes n√£o encontrada (normal para projeto novo)');
    } else {
      console.log('‚úÖ Conex√£o com Supabase funcionando!');
    }
    
    // Testar se podemos criar uma tabela simples
    console.log('üß™ Testando cria√ß√£o de tabela...');
    
    const createTableSQL = `
      CREATE TABLE IF NOT EXISTS test_table (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        name TEXT NOT NULL,
        created_at TIMESTAMP DEFAULT NOW()
      );
    `;
    
    // Tentar executar via RPC
    const { data: rpcData, error: rpcError } = await supabase.rpc('exec', { sql: createTableSQL });
    
    if (rpcError) {
      console.log('‚ö†Ô∏è  RPC exec n√£o dispon√≠vel:', rpcError.message);
      console.log('üí° Vamos usar o Supabase Studio para aplicar as migra√ß√µes');
    } else {
      console.log('‚úÖ RPC exec funcionando!');
    }
    
  } catch (error) {
    console.error('‚ùå Erro na conex√£o:', error.message);
  }
}

testConnection();
