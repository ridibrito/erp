const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function cleanupDatabase() {
  try {
    console.log('üßπ Limpeza e otimiza√ß√£o do banco de dados\n');

    // 1. Tabelas que podem ser removidas (vazias e desnecess√°rias)
    const tablesToRemove = [
      'user_sessions',    // Sess√µes s√£o gerenciadas pelo Supabase Auth
      'audit_logs',       // Vazia, n√£o implementada
      'security_logs',    // Vazia, n√£o implementada
      'api_keys',         // Vazia, n√£o implementada
      'tenant_domains',   // Vazia, n√£o implementada
      'user_permissions'  // Vazia, n√£o implementada
    ];

    console.log('üóëÔ∏è  Removendo tabelas desnecess√°rias...\n');

    for (const tableName of tablesToRemove) {
      try {
        console.log(`Removendo tabela: ${tableName}`);
        
        const { error } = await supabase.rpc('exec_sql', {
          sql_query: `DROP TABLE IF EXISTS ${tableName} CASCADE;`
        });

        if (error) {
          console.log(`‚ùå Erro ao remover ${tableName}: ${error.message}`);
        } else {
          console.log(`‚úÖ Tabela ${tableName} removida com sucesso`);
        }
      } catch (err) {
        console.log(`‚ùå Erro: ${err.message}`);
      }
    }

    console.log('\nüìä Verificando tabelas restantes...\n');

    // 2. Verificar tabelas que permaneceram
    const remainingTables = ['permissions', 'roles', 'role_permissions', 'profiles'];

    for (const tableName of remainingTables) {
      try {
        const { count, error } = await supabase
          .from(tableName)
          .select('*', { count: 'exact', head: true });

        if (!error) {
          console.log(`‚úÖ ${tableName}: ${count} registros`);
        } else {
          console.log(`‚ùå ${tableName}: Erro - ${error.message}`);
        }
      } catch (err) {
        console.log(`‚ùå ${tableName}: Erro - ${err.message}`);
      }
    }

    // 3. Verificar se precisamos criar tabelas essenciais
    console.log('\nüîß Verificando tabelas essenciais...\n');

    // Verificar se existe tabela organizations
    try {
      const { data, error } = await supabase
        .from('organizations')
        .select('*')
        .limit(1);

      if (error && error.message.includes('does not exist')) {
        console.log('‚ùå Tabela organizations n√£o existe - precisa ser criada');
      } else {
        console.log('‚úÖ Tabela organizations existe');
      }
    } catch (err) {
      console.log('‚ùå Tabela organizations n√£o existe - precisa ser criada');
    }

    // 4. Recomenda√ß√µes finais
    console.log('\nüí° RECOMENDA√á√ïES FINAIS:\n');
    console.log('‚úÖ Tabelas mantidas (funcionais):');
    console.log('  ‚Ä¢ permissions - 44 permiss√µes do sistema');
    console.log('  ‚Ä¢ roles - 6 pap√©is definidos');
    console.log('  ‚Ä¢ role_permissions - 114 associa√ß√µes papel-permiss√£o');
    console.log('  ‚Ä¢ profiles - 1 perfil de usu√°rio');
    console.log('');
    console.log('üîß Pr√≥ximos passos:');
    console.log('  1. Criar tabela organizations (se necess√°rio)');
    console.log('  2. Criar tabela user_organizations (se necess√°rio)');
    console.log('  3. Atualizar sistema para usar apenas Supabase Auth');
    console.log('  4. Implementar RBAC usando as tabelas existentes');
    console.log('');
    console.log('üìù Estrutura recomendada para o futuro:');
    console.log('  ‚Ä¢ auth.users (Supabase) - Dados b√°sicos do usu√°rio');
    console.log('  ‚Ä¢ profiles - Dados estendidos do usu√°rio');
    console.log('  ‚Ä¢ organizations - Empresas/organiza√ß√µes');
    console.log('  ‚Ä¢ user_organizations - Rela√ß√£o usu√°rio-empresa');
    console.log('  ‚Ä¢ permissions, roles, role_permissions - Sistema RBAC');

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

// Executar
cleanupDatabase();
