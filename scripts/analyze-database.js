const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function analyzeDatabase() {
  try {
    console.log('üîç An√°lise completa do banco de dados Supabase\n');

    // 1. Verificar estrutura das tabelas existentes
    console.log('üìã ESTRUTURA DAS TABELAS EXISTENTES:\n');

    const existingTables = [
      'permissions', 'roles', 'role_permissions', 'user_permissions',
      'user_sessions', 'audit_logs', 'security_logs', 'api_keys',
      'tenant_domains', 'profiles'
    ];

    for (const tableName of existingTables) {
      console.log(`üìä Tabela: ${tableName}`);
      console.log('‚îÄ'.repeat(40));

      try {
        // Obter estrutura da tabela
        const { data: columns, error: columnsError } = await supabase.rpc('exec_sql', {
          sql_query: `
            SELECT 
              column_name,
              data_type,
              is_nullable,
              column_default
            FROM information_schema.columns 
            WHERE table_name = '${tableName}' 
            AND table_schema = 'public'
            ORDER BY ordinal_position;
          `
        });

        if (columnsError) {
          console.log(`‚ùå Erro ao obter estrutura: ${columnsError.message}`);
        } else if (columns && columns.length > 0) {
          console.log('Colunas:');
          columns.forEach(col => {
            const nullable = col.is_nullable === 'YES' ? 'NULL' : 'NOT NULL';
            const defaultVal = col.column_default ? ` DEFAULT ${col.column_default}` : '';
            console.log(`  ‚Ä¢ ${col.column_name}: ${col.data_type} ${nullable}${defaultVal}`);
          });
        } else {
          console.log('‚ùå Nenhuma coluna encontrada');
        }

        // Contar registros
        const { count, error: countError } = await supabase
          .from(tableName)
          .select('*', { count: 'exact', head: true });

        if (!countError) {
          console.log(`üìà Registros: ${count}`);
        }

        // Mostrar alguns dados de exemplo
        if (count > 0) {
          const { data: sample, error: sampleError } = await supabase
            .from(tableName)
            .select('*')
            .limit(3);

          if (!sampleError && sample && sample.length > 0) {
            console.log('üìù Exemplo de dados:');
            sample.forEach((row, index) => {
              console.log(`  ${index + 1}.`, JSON.stringify(row, null, 2).substring(0, 100) + '...');
            });
          }
        }

      } catch (err) {
        console.log(`‚ùå Erro: ${err.message}`);
      }

      console.log('');
    }

    // 2. Verificar usu√°rios do sistema
    console.log('üë• USU√ÅRIOS DO SISTEMA:\n');
    try {
      const { data: users, error: usersError } = await supabase.auth.admin.listUsers();
      if (!usersError) {
        users.users.forEach((user, index) => {
          console.log(`Usu√°rio ${index + 1}:`);
          console.log(`  ‚Ä¢ ID: ${user.id}`);
          console.log(`  ‚Ä¢ Email: ${user.email}`);
          console.log(`  ‚Ä¢ Criado em: ${user.created_at}`);
          console.log(`  ‚Ä¢ √öltimo login: ${user.last_sign_in_at || 'Nunca'}`);
          console.log(`  ‚Ä¢ Metadata:`, user.user_metadata);
          console.log('');
        });
      }
    } catch (err) {
      console.log('‚ùå Erro ao acessar usu√°rios:', err.message);
    }

    // 3. Verificar storage
    console.log('üì¶ STORAGE:\n');
    try {
      const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
      if (!bucketsError) {
        for (const bucket of buckets) {
          console.log(`Bucket: ${bucket.name}`);
          console.log(`  ‚Ä¢ P√∫blico: ${bucket.public ? 'Sim' : 'N√£o'}`);
          console.log(`  ‚Ä¢ Criado em: ${bucket.created_at}`);
          
          // Listar arquivos no bucket
          const { data: files, error: filesError } = await supabase.storage
            .from(bucket.name)
            .list();

          if (!filesError && files) {
            console.log(`  ‚Ä¢ Arquivos: ${files.length}`);
            files.slice(0, 5).forEach(file => {
              console.log(`    - ${file.name} (${file.metadata?.size || 'N/A'} bytes)`);
            });
            if (files.length > 5) {
              console.log(`    ... e mais ${files.length - 5} arquivos`);
            }
          }
          console.log('');
        }
      }
    } catch (err) {
      console.log('‚ùå Erro ao acessar storage:', err.message);
    }

    // 4. Recomenda√ß√µes
    console.log('üí° RECOMENDA√á√ïES:\n');
    console.log('‚úÖ Tabelas necess√°rias e funcionais:');
    console.log('  ‚Ä¢ permissions, roles, role_permissions - Sistema RBAC');
    console.log('  ‚Ä¢ profiles - Perfis de usu√°rio');
    console.log('  ‚Ä¢ avatars bucket - Upload de avatares');
    console.log('');
    console.log('‚ö†Ô∏è  Tabelas vazias (podem ser removidas se n√£o usadas):');
    console.log('  ‚Ä¢ user_sessions - Sess√µes s√£o gerenciadas pelo Supabase Auth');
    console.log('  ‚Ä¢ audit_logs, security_logs - Logs de auditoria');
    console.log('  ‚Ä¢ api_keys - Chaves de API');
    console.log('  ‚Ä¢ tenant_domains - Dom√≠nios de tenant');
    console.log('  ‚Ä¢ user_permissions - Permiss√µes espec√≠ficas de usu√°rio');
    console.log('');
    console.log('‚ùå Tabelas que faltam (se necess√°rio):');
    console.log('  ‚Ä¢ organizations - Organiza√ß√µes/empresas');
    console.log('  ‚Ä¢ user_organizations - Rela√ß√£o usu√°rio-organiza√ß√£o');
    console.log('  ‚Ä¢ settings - Configura√ß√µes do sistema');
    console.log('  ‚Ä¢ notifications - Notifica√ß√µes');

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

// Executar
analyzeDatabase();
